// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_GAMESTATE_TAG_FLATBUF_H_
#define FLATBUFFERS_GENERATED_GAMESTATE_TAG_FLATBUF_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace tag {
namespace flatbuf {

struct PlayerState;

struct Snapshot;

/// Represents a player's state
MANUALLY_ALIGNED_STRUCT(4) PlayerState FLATBUFFERS_FINAL_CLASS {
 private:
  tag::flatbuf::Vec2 pos_;
  float radius_;
  tag::flatbuf::Color color_;

 public:
  PlayerState() { memset(this, 0, sizeof(PlayerState)); }
  PlayerState(const PlayerState &_o) { memcpy(this, &_o, sizeof(PlayerState)); }
  PlayerState(const tag::flatbuf::Vec2 &_pos, float _radius, const tag::flatbuf::Color &_color)
    : pos_(_pos), radius_(flatbuffers::EndianScalar(_radius)), color_(_color) { }

  /// Player's position
  const tag::flatbuf::Vec2 &pos() const { return pos_; }
  tag::flatbuf::Vec2 &mutable_pos() { return pos_; }
  /// Player's radius
  float radius() const { return flatbuffers::EndianScalar(radius_); }
  void mutate_radius(float _radius) { flatbuffers::WriteScalar(&radius_, _radius); }
  /// Player's color
  const tag::flatbuf::Color &color() const { return color_; }
  tag::flatbuf::Color &mutable_color() { return color_; }
};
STRUCT_END(PlayerState, 16);

/// Represents the state of the world at a given time
struct Snapshot FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CURTIME = 4,
    VT_PLAYERS = 6,
    VT_PERSONALIDX = 8
  };
  /// The in game time this snapshot was taken
  double curtime() const { return GetField<double>(VT_CURTIME, 0.0); }
  bool mutate_curtime(double _curtime) { return SetField(VT_CURTIME, _curtime); }
  /// The states of all players
  const flatbuffers::Vector<const PlayerState *> *players() const { return GetPointer<const flatbuffers::Vector<const PlayerState *> *>(VT_PLAYERS); }
  flatbuffers::Vector<const PlayerState *> *mutable_players() { return GetPointer<flatbuffers::Vector<const PlayerState *> *>(VT_PLAYERS); }
  /// The index of the player the snapshot is being sent to,
  /// -1 for replays
  int8_t personalIdx() const { return GetField<int8_t>(VT_PERSONALIDX, 0); }
  bool mutate_personalIdx(int8_t _personalIdx) { return SetField(VT_PERSONALIDX, _personalIdx); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_CURTIME) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PLAYERS) &&
           verifier.Verify(players()) &&
           VerifyField<int8_t>(verifier, VT_PERSONALIDX) &&
           verifier.EndTable();
  }
};

struct SnapshotBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_curtime(double curtime) { fbb_.AddElement<double>(Snapshot::VT_CURTIME, curtime, 0.0); }
  void add_players(flatbuffers::Offset<flatbuffers::Vector<const PlayerState *>> players) { fbb_.AddOffset(Snapshot::VT_PLAYERS, players); }
  void add_personalIdx(int8_t personalIdx) { fbb_.AddElement<int8_t>(Snapshot::VT_PERSONALIDX, personalIdx, 0); }
  SnapshotBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SnapshotBuilder &operator=(const SnapshotBuilder &);
  flatbuffers::Offset<Snapshot> Finish() {
    auto o = flatbuffers::Offset<Snapshot>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Snapshot> CreateSnapshot(flatbuffers::FlatBufferBuilder &_fbb,
    double curtime = 0.0,
    flatbuffers::Offset<flatbuffers::Vector<const PlayerState *>> players = 0,
    int8_t personalIdx = 0) {
  SnapshotBuilder builder_(_fbb);
  builder_.add_curtime(curtime);
  builder_.add_players(players);
  builder_.add_personalIdx(personalIdx);
  return builder_.Finish();
}

inline flatbuffers::Offset<Snapshot> CreateSnapshotDirect(flatbuffers::FlatBufferBuilder &_fbb,
    double curtime = 0.0,
    const std::vector<const PlayerState *> *players = nullptr,
    int8_t personalIdx = 0) {
  return CreateSnapshot(_fbb, curtime, players ? _fbb.CreateVector<const PlayerState *>(*players) : 0, personalIdx);
}

}  // namespace flatbuf
}  // namespace tag

#endif  // FLATBUFFERS_GENERATED_GAMESTATE_TAG_FLATBUF_H_
